package RLML.util;

/*Generated by MPS */

import jetbrains.mps.logging.Logger;
import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.mps.openapi.module.SRepository;
import org.jetbrains.mps.openapi.module.SModule;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.module.ReloadableModule;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.lang.core.behavior.INamedConcept__BehaviorDescriptor;
import java.lang.reflect.Method;

public class RunProgram {
  private static final Logger LOG = Logger.getLogger(RunProgram.class);

  public static StringBuilder runMyProgram(final SNode rlml, SRepository repository) {
    SModule module = SNodeOperations.getModel(rlml).getModule();
    if (!(module instanceof ReloadableModule)) {
      return new StringBuilder("Module not reloadable, cannot obtain class loader");
    } else {

      try {
        final Wrappers._T<String> fqName = new Wrappers._T<String>();
        repository.getModelAccess().runReadAction(() -> fqName.value = INamedConcept__BehaviorDescriptor.getFqName_idhEwIO9y.invoke(rlml));
        Class<?> theClass = ((ReloadableModule) module).getClass(fqName.value);
        Object instance = theClass.getConstructor().newInstance();

        Method getRunMethod = theClass.getMethod("run");
        getRunMethod.invoke(instance);

        System.out.println("Test values");

        if (LOG.isDebugLevel()) {
          LOG.debug("Some value");
        }

        Method getResultMethod = theClass.getMethod("getResult");
        Object resultObject = getResultMethod.invoke(instance);
        StringBuilder str = (StringBuilder) resultObject;

        return str;

      } catch (Exception ex) {
        return new StringBuilder("Caught " + ex.getClass() + ": " + ex.getMessage());
      }

    }
  }

}
