package RLML.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import jetbrains.mps.smodel.runtime.base.BasePropertyConstraintsDescriptor;
import jetbrains.mps.smodel.runtime.ConstraintsDescriptor;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.smodel.runtime.CheckingNodeContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.smodel.SNodePointer;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import java.util.Map;
import org.jetbrains.mps.openapi.language.SProperty;
import jetbrains.mps.smodel.runtime.PropertyConstraintsDescriptor;
import java.util.HashMap;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SContainmentLink;

public class RLMLComparator_Constraints extends BaseConstraintsDescriptor {
  public RLMLComparator_Constraints() {
    super(CONCEPTS.RLMLComparator$xk);
  }

  public static class VirtualPackage_Property extends BasePropertyConstraintsDescriptor {
    public VirtualPackage_Property(ConstraintsDescriptor container) {
      super(PROPS.virtualPackage$EkXl, container, false, false, true);
    }
    @Override
    public boolean validateValue(SNode node, Object propertyValue, CheckingNodeContext checkingNodeContext) {
      boolean result = staticValidateProperty(node, SPropertyOperations.castString(propertyValue));
      if (!(result) && checkingNodeContext != null) {
        checkingNodeContext.setBreakingNode(new SNodePointer("r:12ad0550-f678-466c-bace-38d01386f6fd(RLML.constraints)", "442065746516909476"));
      }
      return result;
    }
    private static boolean staticValidateProperty(SNode node, String propertyValue) {
      Integer numResult = 0;
      Integer numAgent = 0;
      for (SNode res : ListSequence.fromList(SLinkOperations.getChildren(node, LINKS.result$Y15E))) {
        numResult += 1;
      }
      for (SNode agent : ListSequence.fromList(SLinkOperations.getChildren(node, LINKS.agent$Y0QD))) {
        numAgent += 1;
      }
      return numAgent == numResult;
    }
  }
  @Override
  protected Map<SProperty, PropertyConstraintsDescriptor> getSpecifiedProperties() {
    Map<SProperty, PropertyConstraintsDescriptor> properties = new HashMap<SProperty, PropertyConstraintsDescriptor>();
    properties.put(PROPS.virtualPackage$EkXl, new VirtualPackage_Property(this));
    return properties;
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept RLMLComparator$xk = MetaAdapterFactory.getConcept(0x3c2f74fb565a4cb8L, 0x8a8142024cc7aa10L, 0x10f517300f75a927L, "RLML.structure.RLMLComparator");
  }

  private static final class PROPS {
    /*package*/ static final SProperty virtualPackage$EkXl = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL, 0x115eca8579fL, "virtualPackage");
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink result$Y15E = MetaAdapterFactory.getContainmentLink(0x3c2f74fb565a4cb8L, 0x8a8142024cc7aa10L, 0x10f517300f75a927L, 0x10f517300f75a949L, "result");
    /*package*/ static final SContainmentLink agent$Y0QD = MetaAdapterFactory.getContainmentLink(0x3c2f74fb565a4cb8L, 0x8a8142024cc7aa10L, 0x10f517300f75a927L, 0x10f517300f75a948L, "agent");
  }
}
