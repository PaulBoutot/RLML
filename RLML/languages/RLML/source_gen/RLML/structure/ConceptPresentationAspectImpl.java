package RLML.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_Actions;
  private ConceptPresentation props_ActorCritic;
  private ConceptPresentation props_CPG_ES;
  private ConceptPresentation props_DQN;
  private ConceptPresentation props_DoneStates;
  private ConceptPresentation props_Environment;
  private ConceptPresentation props_EvolutionStrategies;
  private ConceptPresentation props_GeneticAlgorithm;
  private ConceptPresentation props_Geneticparameters;
  private ConceptPresentation props_GradientFree;
  private ConceptPresentation props_HyperNEAT;
  private ConceptPresentation props_Hyperparameters;
  private ConceptPresentation props_MonteCarloControl;
  private ConceptPresentation props_ProximalPolicyOptimization;
  private ConceptPresentation props_QLearning;
  private ConceptPresentation props_RLAgent;
  private ConceptPresentation props_RLAlgorithm;
  private ConceptPresentation props_RLML;
  private ConceptPresentation props_RLMLComparator;
  private ConceptPresentation props_Result;
  private ConceptPresentation props_Rewards;
  private ConceptPresentation props_SARSA;
  private ConceptPresentation props_Settings;
  private ConceptPresentation props_States;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.Actions:
        if (props_Actions == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Actions");
          props_Actions = cpb.create();
        }
        return props_Actions;
      case LanguageConceptSwitch.ActorCritic:
        if (props_ActorCritic == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("RL Actor Critic Algorithm");
          cpb.presentationByName();
          props_ActorCritic = cpb.create();
        }
        return props_ActorCritic;
      case LanguageConceptSwitch.CPG_ES:
        if (props_CPG_ES == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Cartesian Genetic Programming - Evolution Strategies Algorithm");
          cpb.presentationByName();
          props_CPG_ES = cpb.create();
        }
        return props_CPG_ES;
      case LanguageConceptSwitch.DQN:
        if (props_DQN == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("RL DQN Algorithm");
          cpb.presentationByName();
          props_DQN = cpb.create();
        }
        return props_DQN;
      case LanguageConceptSwitch.DoneStates:
        if (props_DoneStates == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("DoneStates");
          props_DoneStates = cpb.create();
        }
        return props_DoneStates;
      case LanguageConceptSwitch.Environment:
        if (props_Environment == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Environment");
          props_Environment = cpb.create();
        }
        return props_Environment;
      case LanguageConceptSwitch.EvolutionStrategies:
        if (props_EvolutionStrategies == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Evolution Strategies for Policy Optimization Algorithm");
          cpb.presentationByName();
          props_EvolutionStrategies = cpb.create();
        }
        return props_EvolutionStrategies;
      case LanguageConceptSwitch.GeneticAlgorithm:
        if (props_GeneticAlgorithm == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_GeneticAlgorithm = cpb.create();
        }
        return props_GeneticAlgorithm;
      case LanguageConceptSwitch.Geneticparameters:
        if (props_Geneticparameters == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Geneticparameters");
          props_Geneticparameters = cpb.create();
        }
        return props_Geneticparameters;
      case LanguageConceptSwitch.GradientFree:
        if (props_GradientFree == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_GradientFree = cpb.create();
        }
        return props_GradientFree;
      case LanguageConceptSwitch.HyperNEAT:
        if (props_HyperNEAT == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Hyper NeuroEvolution of Augmenting Topologies Algorithm");
          cpb.presentationByName();
          props_HyperNEAT = cpb.create();
        }
        return props_HyperNEAT;
      case LanguageConceptSwitch.Hyperparameters:
        if (props_Hyperparameters == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Hyperparameters");
          props_Hyperparameters = cpb.create();
        }
        return props_Hyperparameters;
      case LanguageConceptSwitch.MonteCarloControl:
        if (props_MonteCarloControl == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("RL Monte Carlo Control Algorithm");
          cpb.presentationByName();
          props_MonteCarloControl = cpb.create();
        }
        return props_MonteCarloControl;
      case LanguageConceptSwitch.ProximalPolicyOptimization:
        if (props_ProximalPolicyOptimization == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Proximal Policy Optimization Algorithm");
          cpb.presentationByName();
          props_ProximalPolicyOptimization = cpb.create();
        }
        return props_ProximalPolicyOptimization;
      case LanguageConceptSwitch.QLearning:
        if (props_QLearning == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Q-Learning - Off-policy TD Control Algorithm");
          cpb.presentationByName();
          props_QLearning = cpb.create();
        }
        return props_QLearning;
      case LanguageConceptSwitch.RLAgent:
        if (props_RLAgent == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Reinforcement Learning Agent");
          props_RLAgent = cpb.create();
        }
        return props_RLAgent;
      case LanguageConceptSwitch.RLAlgorithm:
        if (props_RLAlgorithm == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_RLAlgorithm = cpb.create();
        }
        return props_RLAlgorithm;
      case LanguageConceptSwitch.RLML:
        if (props_RLML == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_RLML = cpb.create();
        }
        return props_RLML;
      case LanguageConceptSwitch.RLMLComparator:
        if (props_RLMLComparator == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_RLMLComparator = cpb.create();
        }
        return props_RLMLComparator;
      case LanguageConceptSwitch.Result:
        if (props_Result == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Result");
          props_Result = cpb.create();
        }
        return props_Result;
      case LanguageConceptSwitch.Rewards:
        if (props_Rewards == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Rewards");
          props_Rewards = cpb.create();
        }
        return props_Rewards;
      case LanguageConceptSwitch.SARSA:
        if (props_SARSA == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("SARSA - On-policy TD Control Algorithm");
          cpb.presentationByName();
          props_SARSA = cpb.create();
        }
        return props_SARSA;
      case LanguageConceptSwitch.Settings:
        if (props_Settings == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Gradient Free Reinforcement Learning Algorithm Settings");
          props_Settings = cpb.create();
        }
        return props_Settings;
      case LanguageConceptSwitch.States:
        if (props_States == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("States");
          props_States = cpb.create();
        }
        return props_States;
    }
    return null;
  }
}
